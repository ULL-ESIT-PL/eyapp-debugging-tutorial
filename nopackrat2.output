Warnings:
---------
4 shift/reduce conflicts 
Conflicts:
----------
Conflict in state 7 between rule 10 and token '-' resolved as reduce.
Conflict in state 7 between rule 10 and token '*' resolved as reduce.
Conflict in state 7 between rule 10 and token '+' resolved as reduce.
Conflict in state 7 between rule 10 and token '/' resolved as reduce.
Conflict in state 16 between rule 7 and token '-' resolved as reduce.
Conflict in state 16 between rule 7 and token '*' resolved as shift.
Conflict in state 16 between rule 7 and token '+' resolved as reduce.
Conflict in state 16 between rule 7 and token '/' resolved as shift.
Conflict in state 17 between rule 8 and token '-' resolved as reduce.
Conflict in state 17 between rule 8 and token '*' resolved as reduce.
Conflict in state 17 between rule 8 and token '+' resolved as reduce.
Conflict in state 17 between rule 8 and token '/' resolved as reduce.
Conflict in state 18 between rule 6 and token '-' resolved as reduce.
Conflict in state 18 between rule 6 and token '*' resolved as shift.
Conflict in state 18 between rule 6 and token '+' resolved as reduce.
Conflict in state 18 between rule 6 and token '/' resolved as shift.
Conflict in state 20 between rule 9 and token '-' resolved as reduce.
Conflict in state 20 between rule 9 and token '*' resolved as reduce.
Conflict in state 20 between rule 9 and token '+' resolved as reduce.
Conflict in state 20 between rule 9 and token '/' resolved as reduce.
Conflict in state 22 between rule 5 and token '-' resolved as shift.
Conflict in state 22 between rule 5 and token '*' resolved as shift.
Conflict in state 22 between rule 5 and token '+' resolved as shift.
Conflict in state 22 between rule 5 and token '/' resolved as shift.
State 19 contains 4 shift/reduce conflicts

Rules:
------
0:	$start -> s $end
1:	s -> exp ';' isInTheMiddle s exp ';'
2:	s -> exp ';' isInTheMiddle
3:	exp -> NUM
4:	exp -> VAR
5:	exp -> VAR '=' exp
6:	exp -> exp '+' exp
7:	exp -> exp '-' exp
8:	exp -> exp '*' exp
9:	exp -> exp '/' exp
10:	exp -> '-' exp
11:	exp -> '(' exp ')'
12:	isInTheMiddle -> /* empty */

States:
-------
State 0:

	$start -> . s $end	(Rule 0)

	'('	shift, and go to state 4
	'-'	shift, and go to state 1
	NUM	shift, and go to state 2
	VAR	shift, and go to state 5

	exp	go to state 3
	s	go to state 6

State 1:

	exp -> '-' . exp	(Rule 10)

	'('	shift, and go to state 4
	'-'	shift, and go to state 1
	NUM	shift, and go to state 2
	VAR	shift, and go to state 5

	exp	go to state 7

State 2:

	exp -> NUM .	(Rule 3)

	$default	reduce using rule 3 (exp)

State 3:

	s -> exp . ';' isInTheMiddle s exp ';'	(Rule 1)
	s -> exp . ';' isInTheMiddle	(Rule 2)
	exp -> exp . '+' exp	(Rule 6)
	exp -> exp . '-' exp	(Rule 7)
	exp -> exp . '*' exp	(Rule 8)
	exp -> exp . '/' exp	(Rule 9)

	'*'	shift, and go to state 9
	'+'	shift, and go to state 10
	'-'	shift, and go to state 8
	'/'	shift, and go to state 12
	';'	shift, and go to state 11

State 4:

	exp -> '(' . exp ')'	(Rule 11)

	'('	shift, and go to state 4
	'-'	shift, and go to state 1
	NUM	shift, and go to state 2
	VAR	shift, and go to state 5

	exp	go to state 13

State 5:

	exp -> VAR .	(Rule 4)
	exp -> VAR . '=' exp	(Rule 5)

	'='	shift, and go to state 14

	$default	reduce using rule 4 (exp)

State 6:

	$start -> s . $end	(Rule 0)

	$end	shift, and go to state 15

State 7:

	exp -> exp . '+' exp	(Rule 6)
	exp -> exp . '-' exp	(Rule 7)
	exp -> exp . '*' exp	(Rule 8)
	exp -> exp . '/' exp	(Rule 9)
	exp -> '-' exp .	(Rule 10)

	$default	reduce using rule 10 (exp)

State 8:

	exp -> exp '-' . exp	(Rule 7)

	'('	shift, and go to state 4
	'-'	shift, and go to state 1
	NUM	shift, and go to state 2
	VAR	shift, and go to state 5

	exp	go to state 16

State 9:

	exp -> exp '*' . exp	(Rule 8)

	'('	shift, and go to state 4
	'-'	shift, and go to state 1
	NUM	shift, and go to state 2
	VAR	shift, and go to state 5

	exp	go to state 17

State 10:

	exp -> exp '+' . exp	(Rule 6)

	'('	shift, and go to state 4
	'-'	shift, and go to state 1
	NUM	shift, and go to state 2
	VAR	shift, and go to state 5

	exp	go to state 18

State 11:

	s -> exp ';' . isInTheMiddle s exp ';'	(Rule 1)
	s -> exp ';' . isInTheMiddle	(Rule 2)

	$default	reduce using rule 12 (isInTheMiddle)

	isInTheMiddle	go to state 19

State 12:

	exp -> exp '/' . exp	(Rule 9)

	'('	shift, and go to state 4
	'-'	shift, and go to state 1
	NUM	shift, and go to state 2
	VAR	shift, and go to state 5

	exp	go to state 20

State 13:

	exp -> exp . '+' exp	(Rule 6)
	exp -> exp . '-' exp	(Rule 7)
	exp -> exp . '*' exp	(Rule 8)
	exp -> exp . '/' exp	(Rule 9)
	exp -> '(' exp . ')'	(Rule 11)

	')'	shift, and go to state 21
	'*'	shift, and go to state 9
	'+'	shift, and go to state 10
	'-'	shift, and go to state 8
	'/'	shift, and go to state 12

State 14:

	exp -> VAR '=' . exp	(Rule 5)

	'('	shift, and go to state 4
	'-'	shift, and go to state 1
	NUM	shift, and go to state 2
	VAR	shift, and go to state 5

	exp	go to state 22

State 15:

	$start -> s $end .	(Rule 0)

	$default	accept

State 16:

	exp -> exp . '+' exp	(Rule 6)
	exp -> exp . '-' exp	(Rule 7)
	exp -> exp '-' exp .	(Rule 7)
	exp -> exp . '*' exp	(Rule 8)
	exp -> exp . '/' exp	(Rule 9)

	'*'	shift, and go to state 9
	'/'	shift, and go to state 12

	$default	reduce using rule 7 (exp)

State 17:

	exp -> exp . '+' exp	(Rule 6)
	exp -> exp . '-' exp	(Rule 7)
	exp -> exp . '*' exp	(Rule 8)
	exp -> exp '*' exp .	(Rule 8)
	exp -> exp . '/' exp	(Rule 9)

	$default	reduce using rule 8 (exp)

State 18:

	exp -> exp . '+' exp	(Rule 6)
	exp -> exp '+' exp .	(Rule 6)
	exp -> exp . '-' exp	(Rule 7)
	exp -> exp . '*' exp	(Rule 8)
	exp -> exp . '/' exp	(Rule 9)

	'*'	shift, and go to state 9
	'/'	shift, and go to state 12

	$default	reduce using rule 6 (exp)

State 19:

	s -> exp ';' isInTheMiddle . s exp ';'	(Rule 1)
	s -> exp ';' isInTheMiddle .	(Rule 2)

	'('	shift, and go to state 4
	'-'	shift, and go to state 1
	NUM	shift, and go to state 2
	VAR	shift, and go to state 5

	'('	[reduce using rule 2 (s)]
	'-'	[reduce using rule 2 (s)]
	NUM	[reduce using rule 2 (s)]
	VAR	[reduce using rule 2 (s)]
	$default	reduce using rule 2 (s)

	exp	go to state 3
	s	go to state 23

State 20:

	exp -> exp . '+' exp	(Rule 6)
	exp -> exp . '-' exp	(Rule 7)
	exp -> exp . '*' exp	(Rule 8)
	exp -> exp . '/' exp	(Rule 9)
	exp -> exp '/' exp .	(Rule 9)

	$default	reduce using rule 9 (exp)

State 21:

	exp -> '(' exp ')' .	(Rule 11)

	$default	reduce using rule 11 (exp)

State 22:

	exp -> VAR '=' exp .	(Rule 5)
	exp -> exp . '+' exp	(Rule 6)
	exp -> exp . '-' exp	(Rule 7)
	exp -> exp . '*' exp	(Rule 8)
	exp -> exp . '/' exp	(Rule 9)

	'*'	shift, and go to state 9
	'+'	shift, and go to state 10
	'-'	shift, and go to state 8
	'/'	shift, and go to state 12

	$default	reduce using rule 5 (exp)

State 23:

	s -> exp ';' isInTheMiddle s . exp ';'	(Rule 1)

	'('	shift, and go to state 4
	'-'	shift, and go to state 1
	NUM	shift, and go to state 2
	VAR	shift, and go to state 5

	exp	go to state 24

State 24:

	s -> exp ';' isInTheMiddle s exp . ';'	(Rule 1)
	exp -> exp . '+' exp	(Rule 6)
	exp -> exp . '-' exp	(Rule 7)
	exp -> exp . '*' exp	(Rule 8)
	exp -> exp . '/' exp	(Rule 9)

	'*'	shift, and go to state 9
	'+'	shift, and go to state 10
	'-'	shift, and go to state 8
	'/'	shift, and go to state 12
	';'	shift, and go to state 25

State 25:

	s -> exp ';' isInTheMiddle s exp ';' .	(Rule 1)

	$default	reduce using rule 1 (s)


Summary:
--------
Number of rules         : 13
Number of terminals     : 12
Number of non-terminals : 4
Number of states        : 26
